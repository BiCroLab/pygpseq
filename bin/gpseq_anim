#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ------------------------------------------------------------------------------
# 
# MIT License
# 
# Copyright (c) 2017 Gabriele Girelli
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# 
# Author: Gabriele Girelli
# Email: gigi.ga90@gmail.com
# Project: GPSeq
# Description: script to interface with the pygpseq.anim package.
# 
# Changelog:
#   v1.1.0dev - Added option to skip hole filling in segmented masks.
#   v1.0.0 - first release.
# 
# ------------------------------------------------------------------------------



# DEPENDENCIES =================================================================

import matplotlib
matplotlib.use('ps')

import argparse
import multiprocessing
import numpy as np
import os
import pandas as pd
import pygpseq as gp
import sys

from pygpseq.tools.io import printout

# PARAMETERS ===================================================================

# Add script description
parser = argparse.ArgumentParser(description = """
Analyse a multi-condition GPSeq image dataset.
""", formatter_class = argparse.RawDescriptionHelpFormatter)

# Positional parameters
parser.add_argument('inDir', type = str, nargs = 1,
	help = """Path to input directory, containing singlcde-condition directories
	with TIF files.""")
parser.add_argument('outDir', type = str, nargs = 1,
	help = """Path to output directory, must be different from the input
	directory.""")

# Optional parameters
parser.add_argument('--skip', type = str, nargs = '*',
	help = """Space-separated phases to be skipped.
	Use -- after the last one.""",
	choices = ['inst', 'seg', 'an', 'box', 'plot', 'report'])
parser.add_argument('-l', '--logpath', type = str, nargs = 1,
	help = """Path to log file. By default: outDir/log""", metavar = 'log')
parser.add_argument('-a', '--aspect', type = float, nargs = 3,
	help = """Physical size of Z, Y and X voxel sides.
	Default: 300.0 216.6 216.6""",
	metavar = ('Z', 'Y', 'X'), default = [300., 216.6, 216.6])
parser.add_argument('-U', '--umes', type = str, nargs = 1,
	help = """Unit of measure for the aspect. Default: nm""",
	metavar = "unit", default = ["nm"])
parser.add_argument('-d', '--dna-channels', type = str, nargs = '+',
	help = """Space-separated names of DNA staining channels.
	Use -- after the last one.""",
	default = ['dapi'], metavar = 'dna_name')
parser.add_argument('-s', '--sig-channels', type = str, nargs = '+',
	help = """Space-separated names of GPSeq signal channels.
	Use -- after the last one.""",
	default = ['cy5', 'tmr'], metavar = 'sig_name')
parser.add_argument('-z', '--min-z', type = float, nargs = 1,
	help = """If lower than 1, minimum fraction of stack, if higher than 1,
	minimum number of slices to be occupied by a nucleus. Default: .25""",
	default = [.25], metavar = 'min_z')
parser.add_argument('--seg-type', type = str, nargs = 1,
	help = """Segmentation type. Default: 3d""",
	choices = ['sum_proj', 'max_proj', '3d'], default = ['3d'])
parser.add_argument('--an-type', type = str, nargs = 1,
	help = """Analysis type. Default: mid""",
	choices = ['sum_proj', 'max_proj', '3d', 'mid'],
	default = ['mid'])
parser.add_argument('--mid-type', type = str, nargs = 1,
	help = """Method for mid-section selection. Default: largest""",
	choices = ['central', 'largest', 'maxIsum'],
	default = ['largest'])
parser.add_argument('--nuclear-sel', type = str, nargs = '*',
	help = """Space-separated features for nuclear selection.
	Use -- after the last one. Default: flat_size sumI""",
	choices = ['size', 'surf', 'shape', 'sumI', 'meanI', 'flat_size'],
	default = ['flat_size', 'sumI'])
parser.add_argument('--sigma-smooth', metavar = 'sigmaValue', type = float,
	nargs = 1, default = [.1],
	help = """Sigma value for sparse gaussian smoothing of profiles.""")
parser.add_argument('--sigma-density', metavar = 'sigmaValue', type = float,
	nargs = 1, default = [.1],
	help = """Sigma value for calculation of nuclear density distributions.""")
parser.add_argument('--description', type = str, nargs = '*',
	help = """Space separated condition:description couples.
	'condition' are the name of condition folders.
	'description' are descriptive labels used in plots instead of folder names.
	Use -- after the last one.""")
parser.add_argument('-t', '--threads', metavar = 'nthreads', type = int,
	nargs = 1, default = [1],
	help = """Number of threads to be used for parallelization. Increasing the
	number of threads might increase the required amount of RAM.""")
parser.add_argument('--note', type = str, nargs = 1,
	help = """Dataset/Analysis description. Use double quotes.""")
regexp = "^(?P<channel_name>[^/]*)\\.(?P<channel_id>channel[0-9]+)"
regexp += "\\.(?P<series_id>series[0-9]+)(?P<ext>(_cmle)?\\.tif)$"
parser.add_argument('--regexp', type = str, nargs = 1,
	help = """Advanced. Regular expression to identify tif images.""",
	default = [regexp])

# Flag parameters
parser.add_argument('--no-hole-filling', action = 'store_const',
	help = """Do not fill holes in segmented masks.""",
	const = True, default = False)
parser.add_argument('--center-as-percentile', action = 'store_const',
	help = """Define nucleus center as top percentile instead of top value.""",
	const = True, default = False)
parser.add_argument('-r', '--rescale-deconvolved', action = 'store_const',
	help = """Perform rescaling of deconvolved images. Requires Huygens
	Professional v4.5 log file for an image to be rescaled.""",
	const = True, default = False)
parser.add_argument('-n', '--normalize-distance', action = 'store_const',
	help = """Perform distance normalization. Necessary to compare nuclei
	with different radius.""",
	const = True, default = False)
parser.add_argument('-u', '--DEBUG-MODE', action = 'store_const',
	help = """Debugging mode.""",
	const = True, default = False)

# Version flag
version = "1.1.0dev"
parser.add_argument('--version', action = 'version',
	version = '%s v%s' % (sys.argv[0], version,))

# Parse arguments
args = parser.parse_args()

# Additional checks
maxncores = multiprocessing.cpu_count()
if maxncores < args.threads[0]:
	printout("Lowered number of threads to maximum available: %d" % (
		maxncores), -1)
	args.threads[0] = maxncores

# FUNCTION =====================================================================

def ask(q):
	"""Asks for confirmation. Aborts otherwise.

	Args:
		q (string): question.
	"""

	answer = ''
	while not answer.lower() in ['y', 'n']:
		print("%s %s" % (q, "(y/n)"))
		answer = sys.stdin.readline().strip()

		if 'n' == answer.lower():
			sys.exit("Aborted.\n")
		elif not 'y' == answer.lower():
			print("Please, answer 'y' or 'n'.\n")


# RUN ==========================================================================

# Create pyGPSeq analyzer instance
gpi = gp.anim.Main(ncores = args.threads[0])

# Steps to be skipped
dskip = {
	'inst' : 1,
	'seg' : 2,
	'an' : 3,
	'box' : 3.5,
	'plot' : 4,
	'report' : 5
}
if not None is args.skip:
	gpi.skip = [dskip[e] for e in args.skip]

# Channel names
gpi.sig_names = tuple(args.sig_channels)
gpi.dna_names = tuple(args.dna_channels)

# Data directory
gpi.basedir = args.inDir[0]

# Output directory
gpi.outdir = args.outDir[0]

# Segmentation type for nuclear identification
dseg = {
	'sum_proj' : 0,
	'max_proj' : 1,
	'3d' : 2
}
gpi.seg_type = dseg[args.seg_type[0]]

# Single-nucleus analysis type
dan = {
	'sum_proj' : 0,
	'max_proj' : 1,
	'3d' : 2,
	'mid' : 3
}
gpi.an_type = dan[args.an_type[0]]

# Middle-section selection method
dmid = {
'central' : 0,
'largest' : 1,
'maxIsum' : 2
}
gpi.mid_type = dmid[args.mid_type[0]]

# Whether to define the center as the top percentile
gpi.center_as_percentile = args.center_as_percentile

# Voxel aspect proportions (or sizes, ZYX)
gpi.aspect = tuple(args.aspect)
gpi.umes = args.umes[0]

# Minimum percentage of stack to be occupied by a cell
gpi.min_z_size = args.min_z[0]

# Do hole filling
gpi.do_fill_holes = not args.no_hole_filling

# Nuclear selection
dnsel = {
	'size' : 0,
	'surf' : 1,
	'shape' : 2,
	'sumI' : 3,
	'meanI' : 4,
	'flat_size' : 5
}
arsel = ['size', 'surf', 'shape', 'sumI', 'meanI', 'flat_size']
gpi.nsf = tuple([dnsel[e] for e in args.nuclear_sel])
readable_nsf = "*NONE*"
if 0 != len(gpi.nsf):
	readable_nsf = " ".join([str(arsel[i]) for i in gpi.nsf])

# Regular expression to identify image files
gpi.reg = args.regexp[0]

# Where to save the run log
if None is args.logpath:
	gpi.logpath = args.outDir[0] + '/' + gpi.gen_log_name()
else:
	gpi.logpath = args.logpath[0]

# Perform deconvolved image rescaling?
gpi.rescale_deconvolved = args.rescale_deconvolved

# Normalize distance?
gpi.normalize_distance = args.normalize_distance

# Sigma
gpi.sigma_smooth = args.sigma_smooth[0]
gpi.sigma_density = args.sigma_density[0]

# Better condition naming
if not None is args.description:
	for descr in args.description:
		c, d = descr.split(':')
		gpi.cdescr[c] = d
cdescr_k = list(gpi.cdescr.keys())
cdescr_k.sort()
readable_cdescr = [str(k) + ' => ' + str(gpi.cdescr[k]) for k in cdescr_k]
if 0 == len(readable_cdescr):
	readable_cdescr = ["*NONE*"]

# Notes
if not None is args.note:
	gpi.notes = args.note[0]

# Debugging mode
gpi.debugging = args.DEBUG_MODE

# Show current settings
os.system('clear')
settings_string = """
---------- SETTING:  VALUE ----------

   Input directory :  %s
  Output directory :  %s
          Log file :  %s
  
     Skipped steps :  %s
  
      DNA channels :  %s
   Signal channels :  %s

      Segmentation :  %s
          Analysis :  %s
    Middle section :  %s
       Center perc :  %r

Voxel aspect (ZYX) :  %s
       Aspect unit :  %s
 Minimum Z portion :  %.2f
        Fill holes :  %r
    Sigma (smooth) :  %.4f
   Sigma (density) :  %.4f

  Condition descr. :  %s

 Nuclear selection :  %s

           Threads :  %d
              Note :  %s

            Regexp :  '%s'

   Rescale deconv. :  %r
   Normalize dist. :  %r
         Debug mod :  %r

""" % (
	gpi.basedir, gpi.outdir, gpi.logpath, str(args.skip), str(gpi.dna_names),
	str(gpi.sig_names), args.seg_type[0], args.an_type[0], args.mid_type[0],
	gpi.center_as_percentile, str(gpi.aspect), gpi.umes, gpi.min_z_size,
	gpi.do_fill_holes, gpi.sigma_smooth, gpi.sigma_density,
	"\n                     ".join(readable_cdescr),
	readable_nsf, gpi.ncores, gpi.notes, gpi.reg, gpi.rescale_deconvolved,
	gpi.normalize_distance, gpi.debugging
)
print(settings_string)

# Save settings
with open(os.path.splitext(gpi.logpath)[0] + ".settings.txt", 'w+') as IH:
	IH.write(settings_string)

# Ask for confirmation
ask('Confirm settings and proceed.')

# Start the analysis
gpi = gpi.run()

# End --------------------------------------------------------------------------

################################################################################
