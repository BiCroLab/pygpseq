#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ------------------------------------------------------------------------------
# 
# MIT License
# 
# Copyright (c) 2017 Gabriele Girelli
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# 
# Author: Gabriele Girelli
# Email: gigi.ga90@gmail.com
# Date: 20171205
# Project: bioimaging
# Description: automatic 3D segmentation of nuclear staining.
# 
# ------------------------------------------------------------------------------



# DEPENDENCIES =================================================================

import argparse
from joblib import Parallel, delayed
import math
import multiprocessing
import numpy as np
import os
import re
from scipy import ndimage as ndi
import sys
import tifffile
from tqdm import tqdm
import warnings

from skimage.filters import threshold_local, threshold_otsu
import skimage.io as io
from skimage.measure import label
from skimage.morphology import closing, cube, square
from skimage.segmentation import clear_border

from pygpseq import const
from pygpseq.tools import Binarize
from pygpseq.tools import image as imt
from pygpseq.tools import path as pt
from pygpseq.tools import plot
from pygpseq.tools import stat as stt
from pygpseq.tools import vector as vt

# PARAMETERS ===================================================================

# Add script description
parser = argparse.ArgumentParser(description = '''
Perform automatic 3D segmentation of DNA staining. Images are first identified
based on a regular expression matching the file name. Then, they are first
re-scaled if deconvolved with Huygens software, then a global (Otsu) and
local (median) thresholds are combined to binarize the image in 3D. Then, holes
are filled in 3D and a closing operation is performed to remove small objects.
Objects are filtered based on volume and Z size, and those touching the XY
contour of the image are discarded. The generated images have identified objects
labeled with different intensity levels.
''', formatter_class = argparse.RawDescriptionHelpFormatter)

# Add mandatory arguments
parser.add_argument('imgFolder', type = str, nargs = 1,
    help = 'Path to folder containing deconvolved tiff images.')
parser.add_argument('outFolder', type = str, nargs = 1,
    help = '''Path to output folder where imt.binarized images will be stored
    (created if does not exist).''')

# Optional parameters
default_inreg = '^.*\.tiff?$'
parser.add_argument('--inreg', type = str, nargs = 1,
    help = """regular expression to identify images from imgFolder.
    Default: '%s'""" % (default_inreg,), default = [default_inreg])
parser.add_argument('--outprefix', type = str, nargs = 1,
    help = """prefix to add to the name of output imt.binarized images.
    Default: 'mask_', 'cmask_' if --compressed is used.""",
    default = ['mask_'])
parser.add_argument('--neighbour', type = int, nargs = 1,
    help = """Side of neighbourhood square/cube. Default: 101""",
    default = [101])
parser.add_argument('--radius', type = float, nargs = 2,
    help = """Range of object radii [vx] to be considered a nucleus.
    Default: [10, Inf]""", default = [10., float('Inf')])
parser.add_argument('--minZ', type = float, nargs = 1,
    help = """Minimum fraction of stack occupied by an object to be considered a
    nucleus. Default: .25""", default = [.25])
parser.add_argument('--threads', type = int, nargs = 1,
    help = """number of threads for parallelization. Default: 1""",
    default = [1])

# Flags
parser.add_argument('--labeled',
    action = 'store_const', dest = 'labeled',
    const = True, default = False,
    help = 'Export labeled mask instead of binary one.')
parser.add_argument('--compressed',
    action = 'store_const', dest = 'compressed',
    const = True, default = False,
    help = 'Generate compressed TIF binary masks (not compatible with ImageJ).')

# Version flag
version = "2.0.1"
parser.add_argument('--version', action = 'version',
    version = '%s %s' % (sys.argv[0], version,))

# Parse arguments
args = parser.parse_args()

# Assign to in-script variables
imgdir = args.imgFolder[0]
outdir = args.outFolder[0]
inpattern = re.compile(args.inreg[0])
outprefix = args.outprefix[0]
neighbour_side = args.neighbour[0]
min_z_size = args.minZ[0]
radius_interval = [args.radius[0], args.radius[1]]
ncores = args.threads[0]
labeled = args.labeled
compressed = args.compressed
if compressed and "mask_" == outprefix:
    outprefix = 'cmask_'

# Additional checks
maxncores = multiprocessing.cpu_count()
if maxncores < ncores:
    print("Lowered number of threads to maximum available: %d" % (maxncores))
    ncores = maxncores

# FUNCTIONS ====================================================================

def run_segmentation(imgpath, imgdir):
    # Perform 3D segmentation of nuclear staining image.
    # 
    # Args:
    #   imgpath (string): input image file name.
    #   imgdir (string): input image folder.
    # 
    # Returns:
    #   string: path to output image.
    
    # Preparation --------------------------------------------------------------

    # Read image
    img = imt.read_tiff(os.path.join(imgdir, imgpath))

    # Re-slice
    img = imt.slice_k_d_img(img, 3)

    # Re-scale if deconvolved
    img = (img / imt.get_rescaling_factor(
        os.path.join(imgdir,imgpath))).astype('float')

    # Pick first timeframe (also for 2D images)
    if 3 == len(img.shape) and 1 == img.shape[0]:
        img = img[0]

    # binarize -----------------------------------------------------------------
    
    binarization = Binarize(an_type = const.AN_3D,
        seg_type = const.SEG_3D, verbose = False,
        radius_interval = radius_interval, min_z_size = min_z_size)
    (mask, thr, log) = binarization.run(img)

    # Filter based on object size
    mask, tmp = binarization.filter_obj_XY_size(mask)
    mask, tmp = binarization.filter_obj_Z_size(mask)

    # Identify nuclei
    L = label(mask)

    # Output -------------------------------------------------------------------
    outpath = "%s%s" % (outdir, outprefix + imgpath)
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        if labeled:
            plot.save_tif(outpath, L, 'uint8', compressed)
        else:
            L[np.nonzero(L)] = 255
            plot.save_tif(outpath, L, 'uint8', compressed)
    print("Segmentation output written to %s" % (outpath,))

    return(outpath)

# RUN ==========================================================================

# Add trailing slashes
imgdir = pt.add_trailing_slash(imgdir)
outdir = pt.add_trailing_slash(outdir)

# Stop if input folder does not exist
if not os.path.isdir(imgdir):
    sys.exit("!ERROR! Image folder not found: %s" % (imgdir,))

# Create output folder
if not os.path.isdir(outdir):
    os.mkdir(outdir)

# Identify images --------------------------------------------------------------

# Identify tiff images
imglist = [f for f in os.listdir(imgdir) 
    if os.path.isfile(os.path.join(imgdir, f))
    and not type(None) == type(re.match(inpattern, f))]
print("Found %d image(s) to segment. Starting..." % len(imglist))

# Start iteration --------------------------------------------------------------

if 1 == ncores:
    for imgpath in tqdm(imglist):
        run_segmentation(imgpath, imgdir)
else:
    outlist = Parallel(n_jobs = ncores, verbose = 11)(
        delayed(run_segmentation)(imgpath, imgdir)
        for imgpath in imglist)

# END ==========================================================================

################################################################################
