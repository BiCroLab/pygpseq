#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ------------------------------------------------------------------------------
# 
# MIT License
# 
# Copyright (c) 2017 Gabriele Girelli
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# 
# Author: Gabriele Girelli
# Email: gigi.ga90@gmail.com
# Version: 1.0.0
# Date: 20180302
# Project: bioimaging
# Description: Uncompress compressed tiff.
# Requires: 
# 
# Changelog:
#  v1.0.0 - 20180314: merged with pygpseq.
#  v0.0.1 - 20171205: first implementation.
# 
# ------------------------------------------------------------------------------



# DEPENDENCIES =================================================================

import argparse
from joblib import Parallel, delayed
import multiprocessing
import numpy as np
import os
import re
from scipy import ndimage as ndi
import sys
import tifffile
import warnings

from pygpseq.tools import image as imt
from pygpseq.tools import path as pt
from pygpseq.tools import plot

from skimage.filters import threshold_local, threshold_otsu
import skimage.io as io
from skimage.measure import label
from skimage.morphology import closing, cube, square
from skimage.segmentation import clear_border

# PARAMETERS ===================================================================

# Add script description
parser = argparse.ArgumentParser(description = '''
Uncompress all tiff files matching the specified pattern.
''')

# Add mandatory arguments
parser.add_argument('imgFolder', type = str, nargs = 1,
    help = 'Path to folder containing deconvolved tiff images.')
parser.add_argument('outFolder', type = str, nargs = 1,
    help = '''Path to output folder where binarized images will be stored
    (created if does not exist).''')

# Optional parameters
default_inreg = '^.*\.tiff?$'
parser.add_argument('--inreg', type = str, nargs = 1,
    help = """regular expression to identify images from imgFolder.
    Default: '%s'""" % (default_inreg,), default = [default_inreg])
parser.add_argument('--threads', type = int, nargs = 1,
    help = """number of threads for parallelization. Default: 1""",
    default = [1])

# Version flag
version = "1.0.0"
parser.add_argument('--version', action = 'version',
    version = '%s %s' % (sys.argv[0], version,))

# Parse arguments
args = parser.parse_args()

# Assign to in-script variables
imgdir = args.imgFolder[0]
outdir = args.outFolder[0]
inpattern = re.compile(args.inreg[0])
ncores = args.threads[0]

# Additional checks
maxncores = multiprocessing.cpu_count()
if maxncores < ncores:
    print("Lowered number of threads to maximum available: %d" % (maxncores))
    ncores = maxncores

# FUNCTIONS ====================================================================

def uncompress(imgpath, imgdir, outdir):
    # Perform 3D segmentation of nuclear staining image.
    # 
    # Args:
    #   imgpath (string): input image file name.
    #   imgdir (string): input image folder.
    # 
    # Returns:
    #   string: path to output image.
    
    # Preparation --------------------------------------------------------------

    # Read image
    img = imt.read_tiff(os.path.join(imgdir, imgpath))

    # Write image
    plot.save_tif(os.path.join(outdir, imgpath), img, imt.get_dtype(img), False)

    return(os.path.join(outdir, imgpath))

# RUN ==========================================================================

# Add trailing slashes
imgdir = pt.add_trailing_slash(imgdir)
outdir = pt.add_trailing_slash(outdir)

# Stop if input folder does not exist
if not os.path.isdir(imgdir):
    sys.exit("!ERROR! Image folder not found: %s" % (imgdir,))

# Create output folder
if not os.path.isdir(outdir):
    os.mkdir(outdir)

# Identify images --------------------------------------------------------------

# Identify tiff images
imglist = [f for f in os.listdir(imgdir) 
    if os.path.isfile(os.path.join(imgdir, f))
    and not type(None) == type(re.match(inpattern, f))]

# Start iteration --------------------------------------------------------------

outlist = Parallel(n_jobs = ncores)(
    delayed(uncompress)(imgpath, imgdir, outdir)
    for imgpath in imglist)

# END ==========================================================================

################################################################################
