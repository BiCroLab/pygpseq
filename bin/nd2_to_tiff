#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ------------------------------------------------------------------------------
# 
# MIT License
# 
# Copyright (c) 2017 Gabriele Girelli
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# 
# Author: Gabriele Girelli
# Email: gigi.ga90@gmail.com
# Date: 20180316
# Project: bioimaging
# Description: convert nd2 images to tiff.
# 
# Changelog:
#  v1.0.1 - 20180410: added extension to output tif.
#  v1.0.0 - 20180320: first release.
# 
# ------------------------------------------------------------------------------



# DEPENDENCIES =================================================================

import argparse
from nd2reader import ND2Reader
import os
import sys
import tifffile

from pygpseq.tools import image as imt
from pygpseq.tools import plot

# PARAMETERS ===================================================================

# Add script description
parser = argparse.ArgumentParser(description = '''
Convert an nd2 file into single channel tiff images.
Output file name is either in GPSeq (default) or DOTTER notation.
Channel names are lower-cased.

DOTTER:  dapi_001.tif
         <channelName>_<seriesNumber>.tif

GPSeq:   dapi.channel001.series001.tif
         <channelName>.channel<channelNumber>.series<seriesNumber>.tif
''', formatter_class = argparse.RawDescriptionHelpFormatter)

# Add mandatory arguments
parser.add_argument('input', type = str, nargs = 1,
    help = '''Path to the nd2 file to convert.''')
parser.add_argument('outdir', type = str, nargs = 1,
    help = '''Path to output TIFF folder, created if missing.''')

# Add arguments with default value
parser.add_argument('-M', '--mode', type = str, nargs = 1,
    choices = ("DOTTER", "GPSeq"), metavar = 'mode',
    help = """Output filename notation. Default: GPSeq.""",
    default = ["GPSeq"])

# Add flags
parser.add_argument('--compressed',
    action = 'store_const', dest = 'doCompress',
    const = True, default = False,
    help = 'Force compressed TIFF as output (not compatible with ImageJ).')

# Version flag
version = "1.0.1"
parser.add_argument('--version', action = 'version',
    version = '%s %s' % (sys.argv[0], version,))

# Parse arguments
args = parser.parse_args()

# Assign to in-script variables
ipath = args.input[0]
outdir = args.outdir[0]
mode = args.mode[0]
doCompress = args.doCompress

# Additional checks
if not os.path.isfile(ipath):
    printout("Input file not found: %s" % ipath, -2)
if os.path.isfile(outdir):
    printout("The specified output directory cannot be a file. Path: %s" % (
        outdir,), -2)
if not os.path.isdir(outdir): os.mkdir(outdir)

# FUNCTIONS ====================================================================

def export_fov(fov, metadata, fid):
    '''Export a field of view after bundling the axes to separate channel TIFF.

    Args:
        fov (np.ndarray): input multi-channel field of view array.
        metadata (dict): nd2 metadata dictionary.
        fid (int): field of view 0-based index.
    '''

    print(" Field #%d: found %d channels." % (fid + 1, fov.shape[3]))

    # Iterate over channels
    for cid in range(fov.shape[3]):
        ch = fov[:, :, :, cid]

        # Identify ouytput file name notation
        if "GPSeq" == mode:
            outpath = "%s.channel%03d.series%03d.tif" % (
                metadata['channels'][cid].lower(), cid + 1, fid + 1)
        elif "DOTTER" == mode:
            outpath = "%s_%03d.tif" % (
                metadata['channels'][cid].lower(), fid + 1)
        else: return()

        print("  Exporting %s..." % outpath)
        plot.save_tif(os.path.join(outdir, outpath),
            ch, imt.get_dtype(ch.max()), doCompress)

# RUN ==========================================================================

# Create buffer pointer to nd2 image
images = ND2Reader(ipath)

# Check if multiple fields of view are present
if 'v' not in images.axes:
    print("Single field of view found.")

    # Export single field of view
    images.bundle_axes = 'xyzc'
    export_fov(images[0], images.metadata, 0)
else:
    print("Multiple fields of view found (%d)." % images.sizes['v'])

    # Export multiple fields of view
    images.iter_axes = 'v'
    images.bundle_axes = 'xyzc'
    for fid in range(images.sizes['v']):
        fov = images[fid]
        export_fov(fov, images.metadata, fid)

print("DONE")

################################################################################
