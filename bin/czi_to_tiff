#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ------------------------------------------------------------------------------
# 
# MIT License
# 
# Copyright (c) 2017 Gabriele Girelli
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# 
# Author: Gabriele Girelli
# Email: gigi.ga90@gmail.com
# Date: 20180918
# Project: bioimaging
# Description: convert czi images to tiff.
# 
# ------------------------------------------------------------------------------



# DEPENDENCIES =================================================================

import argparse
import czifile
import os
import sys
import tifffile
from tqdm import tqdm
import warnings

from pygpseq.tools import image as imt
from pygpseq.tools import plot
from pygpseq.tools.io import printout

# PARAMETERS ===================================================================

# Add script description
parser = argparse.ArgumentParser(description = '''
Convert a czi file into single channel tiff images.
Output file name is either in GPSeq (default) or DOTTER notation.
Channel names are lower-cased.

DOTTER:  dapi_001.tif
         <channelName>_<seriesNumber>.tif

GPSeq:   dapi.channel001.series001.tif
         <channelName>.channel<channelNumber>.series<seriesNumber>.tif
''', formatter_class = argparse.RawDescriptionHelpFormatter)

# Add mandatory arguments
parser.add_argument('input', type = str,
    help = '''Path to the czi file to convert.''')

# Add arguments with default value
parser.add_argument('-o', '--outdir', metavar = "outdir", type = str,
    help = """Path to output TIFF folder, created if missing. Default to a
    folder with the input file basename.""", default = None)
parser.add_argument('-m', '--mode', type = str,
    choices = ("DOTTER", "GPSeq"), metavar = 'mode',
    help = """Output filename notation. Default: GPSeq.""",
    default = "GPSeq")

# Add flags
parser.add_argument('--compressed',
    action = 'store_const', dest = 'doCompress',
    const = True, default = False,
    help = 'Force compressed TIFF as output.')

# Version flag
version = "0.0.1"
parser.add_argument('--version', action = 'version',
    version = '%s %s' % (sys.argv[0], version,))

# Parse arguments
args = parser.parse_args()

# Assign to in-script variables
if type(None) == type(args.outdir):
    args.outdir = os.path.splitext(os.path.basename(args.input))[0]
    args.outdir = os.path.join(os.path.dirname(args.input), args.outdir)
    print("Output directory: '%s'" % args.outdir)

# Additional checks
if not os.path.isfile(args.input):
    printout("Input file not found: %s" % args.input, -2)
if os.path.isfile(args.outdir):
    printout("The specified output directory cannot be a file. Path: %s" % (
        args.outdir,), -2)
if not os.path.isdir(args.outdir): os.mkdir(args.outdir)

# FUNCTIONS ====================================================================

def export_fov(fov, metadata, fid, bundled_axes):
    '''Export a field of view after bundling the axes to separate channel TIFF.

    Args:
        fov (np.ndarray): input multi-channel field of view array.
        metadata (dict): czi metadata dictionary.
        fid (int): field of view 0-based index.
    '''
    pass

# RUN ==========================================================================

# Create buffer pointer to czi image
images = czifile.CziFile(args.input)

with warnings.catch_warnings(record = True) as wlist:
    pixels = images.asarray()
axes = images.axes

assert "S" in axes, "missing sample axis."
assert "C" in axes, "missing channel axis."

Si = axes.index("S")
Ci = axes.index("C")

print("Found %d fields of view, with %d channels each." % (
    images.shape[Si], images.shape[Ci]))

channel_path = "Metadata/DisplaySetting/Channels/Channel/DyeName"
channel_names = [x.text for x in images.metadata.findall(channel_path)]
channel_names = [x.replace(" ", "").lower() for x in channel_names]

res_path = "Metadata/Scaling/Items/Distance"
resolution = [x for x in images.metadata.findall(res_path)
    if x.attrib['Id'] in ["X", "Y", "Z"]]
resolution = dict([(x.attrib['Id'], float(x[0].text)) for x in resolution])
resolutionXY = (1e-6/resolution["X"], 1e-6/resolution["Y"])

# Remove previous axes
if 0 != Si:
    for i in range(Si):
        assert_msg = "axis '%s' with size >1 [%d] not supported." % (
            axes[i], images.shape[i])
        assert 1 == images.shape[i], assert_msg
pixels = pixels.reshape(pixels.shape[Si:len(pixels.shape)])
axes = axes[Si:]

# Remove axis 0 (if last)
if axes.endswith("0"):
    pixels = pixels.reshape(pixels.shape[:-1])
    axes = axes[:-1]

for si in tqdm(range(images.shape[Si])):
    for ci in range(images.shape[Ci]):
        stack = pixels[si, ci]

        # Select first timeframe
        stack_axes = axes[2:]
        if "T" in stack_axes:
            Ti = stack_axes.index("T")

            assert_msg = "time-lapse iamges not supported."
            assert 1 == stack.shape[Ti], assert_msg

            stack_shape = list(stack.shape)
            stack_shape.pop(Ti)
            stack = stack.reshape(stack_shape)

        # Identify ouytput file name notation
        if "GPSeq" == args.mode:
            outpath = "%s.channel%03d.series%03d.tif" % (
                channel_names[ci], ci + 1, si + 1)
        elif "DOTTER" == args.mode:
            outpath = "%s_%03d.tif" % (
                channel_names[ci], si + 1)

        plot.save_tif(os.path.join(args.outdir, outpath),
            stack, imt.get_dtype(stack.max()), args.doCompress,
            bundled_axes = stack_axes, resolution = resolutionXY,
            inMicrons = True, ResolutionZ = resolution["Z"]*1e6,
            forImageJ = True)

################################################################################
